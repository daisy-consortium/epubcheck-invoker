//
// NOTE:
// This file has been generated by running the script:
// mkTsts.pl errorsMobyDick.txt
// 
// Please don't edit this file. Edit mkTsts.pl instead and
// run it to generate this file with your changes.
//

package org.daisy.validation.epubcheck;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;

public class EpubcheckBackendTestMobyDick {

	@Test
	public void testMobyDick() {

		final String epubFile = "resources/9780316000000_MobyDick_r6.epub";
		final List<Issue> issues = EpubcheckBackend
				.run(epubFile);
		Issue issue = null;
		assertEquals(188, issues.size());
		int i = 0;

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/package.opf", issue.file);
		assertEquals(18, issue.lineNo);
		assertEquals(84, issue.colNo);
		assertEquals("Undefined property: product-identifier-type", issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/toc.xhtml", issue.file);
		assertEquals(6, issue.lineNo);
		assertEquals(75, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/copyright.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/titlepage.xhtml", issue.file);
		assertEquals(6, issue.lineNo);
		assertEquals(75, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/cover.xhtml", issue.file);
		assertEquals(1, issue.lineNo);
		assertEquals(300, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/css/stylesheet.css", issue.file);
		assertEquals(-1, issue.lineNo);
		assertEquals(-1, issue.colNo);
		assertEquals(
				"Font-face reference OPS/fonts/STIXGeneral.otfto non-standard font type font/opentype",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/css/stylesheet.css", issue.file);
		assertEquals(-1, issue.lineNo);
		assertEquals(-1, issue.colNo);
		assertEquals(
				"Font-face reference OPS/fonts/STIXGeneralBol.otfto non-standard font type font/opentype",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/css/stylesheet.css", issue.file);
		assertEquals(-1, issue.lineNo);
		assertEquals(-1, issue.colNo);
		assertEquals(
				"Font-face reference OPS/fonts/STIXGeneralItalic.otfto non-standard font type font/opentype",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/css/stylesheet.css", issue.file);
		assertEquals(-1, issue.lineNo);
		assertEquals(-1, issue.colNo);
		assertEquals(
				"Font-face reference OPS/fonts/STIXGeneralBolIta.otfto non-standard font type font/opentype",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/preface_001.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/introduction_001.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/epigraph_001.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(11, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(15, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(19, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(23, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(28, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(33, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(39, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(44, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(49, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(55, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(60, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(65, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(69, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(73, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(78, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(83, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(88, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(93, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(98, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(103, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(108, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(113, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(118, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(123, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_001_overlay.smil", issue.file);
		assertEquals(128, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(11, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(15, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(19, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(24, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(29, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(34, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(39, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(44, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(49, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(54, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(59, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(64, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(69, issue.lineNo);
		assertEquals(101, issue.colNo);
		assertEquals(
				"Media Overlay audio refernence OPS/audio/mobydick_001_002_melville.m4a to non-standard audio type audio/m4a",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_003.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_004.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_005.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_006.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_007.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_008.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_009.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_010.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_011.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_012.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_013.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_014.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_015.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_016.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_017.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_018.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_019.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_020.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_021.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_022.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_023.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_024.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_025.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_026.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_027.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_028.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_029.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_030.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_031.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_032.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_033.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_034.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_035.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_036.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_037.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_038.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_039.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_040.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_041.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_042.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_043.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_044.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_045.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_046.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_047.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_048.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_049.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_050.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_051.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_052.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_053.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_054.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_055.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_056.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_057.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_058.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_059.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_060.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_061.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_062.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_063.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_064.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_065.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_066.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_067.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_068.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_069.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_070.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_071.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_072.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_073.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_074.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_075.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_076.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_077.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_078.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_079.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_080.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_081.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_082.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_083.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_084.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_085.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_086.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_087.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_088.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_089.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_090.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_091.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_092.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_093.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_094.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_095.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_096.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_097.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_098.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_099.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_100.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_101.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_102.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_103.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_104.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_105.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_106.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_107.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_108.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_109.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_110.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_111.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_112.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_113.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_114.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_115.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_116.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_117.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_118.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_119.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_120.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_121.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_122.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_123.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_124.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_125.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_126.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_127.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_128.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_129.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_130.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_131.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_132.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_133.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_134.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_135.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_136.xhtml", issue.file);
		assertEquals(5, issue.lineNo);
		assertEquals(69, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/toc-short.xhtml", issue.file);
		assertEquals(8, issue.lineNo);
		assertEquals(75, issue.colNo);
		assertEquals(
				"value of attribute \"http-equiv\" is invalid; must be a string matching the regular expression \"([Dd][Ee][Ff][Aa][Uu][Ll][Tt]\\-[Ss][Tt][Yy][Ll][Ee])|([Rr][Ee][Ff][Rr][Ee][Ss][Hh])\"",
				issue.txt);

		issue = issues.get(i++);
		assertEquals("ERROR", issue.type);
		assertEquals("OPS/chapter_002_overlay.smil", issue.file);
		assertEquals(10, issue.lineNo);
		assertEquals(54, issue.colNo);
		assertEquals(
				"'c002p0000': fragment identifier is not defined in 'OPS/chapter_002.xhtml'",
				issue.txt);

	}
}
