<?xml version="1.0"?>
<project name="epubcheckbackend" default="app" basedir=".">
	
	<!--
		TODO:
		- build.prod.dir and build.test.dir not yet used
		- tests not yet separated from app.
        - Slapping everything into one jar:
          we could probably add sac.jar, flute.jar into our jar 
          (nothing happening in its manifest)
		- this would still leave us with commons-compress, jing, saxon.
          Until I learn how to add their manifests into a unified one.
          There are tools: http://one-jar.sourceforge.net/, http://code.google.com/p/jarjar/,
          http://proguard.sourceforge.net/
          http://code.google.com/p/onejar-maven-plugin/
          http://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html#jar-with-dependencies
          http://stackoverflow.com/questions/1059851/is-it-possible-to-package-all-the-jar-dependencies-in-one-big-jar
	-->

	<property name="build.dir" value="build"/>
	<property name="build.prod.dir" value="${build.dir}/prod"/>
	<property name="build.test.dir" value="${build.dir}/test"/>
	<property name="classes.dir" location="${build.dir}/classes"/>
	<property name="build.lib.dir" location="${build.dir}/lib"/>
	<property name="src.dir" location="src"/>
	<property name="test.dir" location="test"/>
	<property name="principal.jar.dir" location="lib"/>
	<property name="tmp.dir" location="${build.dir}/tmp"/>

	<property name="app.jar" location="${build.lib.dir}/${ant.project.name}.jar"/>

    <presetdef name="my.javac">
        <javac includeantruntime="false" />
    </presetdef>
	
	<target name="prepare">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.lib.dir}"/>
        <!-- <mkdir dir="${build.test.dir}"/> -->
		<mkdir dir="${classes.dir}"/>
		
		
		<!-- 
		Note: manifestclasspath must *follow* creation of build.lib.dir!
		http://ant.apache.org/manual/Tasks/manifestclasspath.html
		http://stackoverflow.com/questions/858766/generate-manifest-class-path-from-classpath-in-ant
		Note: Of course this is only of use for the calling of java -jar epubcheckbackend.jar
		      since only then the Manifest-Entry Class-Path: is heeded!
		-->
		<path id="dep.runtime">
		    <fileset dir="${principal.jar.dir}">
		        <include name="**/*.jar" />
		    </fileset>
		</path>
		<property name="dep_cp" value="${toString:dep.runtime}" />
	    <manifestclasspath property="manifest_cp" jarfile="${app.jar}">
	        <classpath refid="dep.runtime" />
	    </manifestclasspath>
	</target>


	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>
	
	<fileset id="principal.jar" dir="${principal.jar.dir}">
		<patternset>
			<include name="*.jar"/>
		</patternset>
	</fileset>

	<path id="project.classpath">
		<pathelement location="${build.prod.dir}"/>
		<pathelement location="${build.test.dir}"/>
		<pathelement location="${classes.dir}"/>
		<fileset refid="principal.jar"/>
	</path>

	<target name="compile" depends="prepare">
		<my.javac
			srcdir="${src.dir}"
			destdir="${classes.dir}"
			deprecation="on"
			debug="on">
			<classpath refid="project.classpath"/>
		</my.javac>
	</target>

	<target name="compile-tests" depends="compile">
		<javac
			srcdir="${test.dir}"
			destdir="${build.test.dir}"
			deprecation="on"
			debug="on">
			<classpath refid="project.classpath"/>
		</javac>
	</target>

	<target name="test" depends="compile-tests">
		<junit haltonfailure="true">
			<classpath refid="project.classpath"/>
			<formatter type="brief" usefile="false"/>
			<batchtest>
				<fileset dir="${build.test.dir}"
					includes="**/*Test.class"
					excludes="**/HttpUnitTest.class"
				/>
			</batchtest>
			<sysproperty key="doc.dir" value="${doc.dir}"/>
			<sysproperty key="index.dir" value="${index.dir}"/>
		</junit>
	</target>

	<target name="unjar3rdparty" description="unjar 3rd party libs into app.dir">
		<unjar dest="${tmp.dir}">
			<fileset refid="principal.jar"/>
		</unjar>
	</target>

	<target name="app" depends="compile" description="copy compiled classes into app.dir">
		<copy todir="${tmp.dir}">
			<fileset dir="${classes.dir}"/>
		</copy>
		

		<!-- make application jar file -->
		<jar jarfile="${app.jar}"
			basedir="${tmp.dir}">
		    <manifest>
		      <attribute name="Main-Class"
		            value="org.daisy.validation.epubcheck.EpubcheckBackend"/>
		    	<attribute name="Class-Path" value="${manifest_cp}" />
		    </manifest>
		</jar>
		<copy todir="${build.lib.dir}">
			<fileset refid="principal.jar"/>
		</copy>

	    <delete dir="${classes.dir}"/>
	    <delete dir="${tmp.dir}"/>
	</target>

</project>
